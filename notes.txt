git 常用命令详解

git 命令

   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

================================================================================

整理关于git常用命令 便于日后查看 

1. 首先配置用户名和邮件名称。该步骤是为了配置github上的邮箱和用户名.
        git config --global user.name "zhang-lei"
        git config --global user.email "zhanglei4517@gmail.com"

        以上两条命令就将用户名和密码设置好了.如果不设置 后面commit是不会成功的.
2. 初始化本地仓库和创建文件 提交代码
        git init
        git add .
        git commit -m

3. 添加到远程仓库
        git remote add demo https://ip:port/zhang-lei/demo.git
        git pull demo master  表示获取远程demo master分支.
        git push demo master  表示发送上送demo master版本

4. 创建分支
        git branch 查看分支
        git branch dev   创建dev分支
        git branch -d dev 删除dev分支

5. 合并分支
        git merge dev 合并dev分支到当前分支
        git merge commitId 合并提交时内容到当前分支

6. checkout作用
        git checkout dev   分支之间跳转
        git checkout filename  恢复filename
        git checkout HEAD 恢复HEAD中的内容
        git checkout filename --cached
        git checkout filename --staged

7. 比较文件
        git diff
        git diff --cached
        git diff --staged
        git diff HEAD

8. 打标签。 标签作用 将提交的哈希码 起别名，便于记忆和操作。
	git tag  查看标签
	git tag  tagName 创建标签

9. 合并文件
	git merge 分支名称


10. 远程checkout分支

	git clone 的时候 默认从远程获取所有的分支 但是咱本地只创建一个master分支。

	如果想checkout到其它的分支 需要做以下工作

	git checkout -a 查看下所有分支 包含本地和远程所有分支

	git checkout -b 分支名称 origin/远程分支名称    -b 参数会创建一个分支 并tracking 远程分支 同时checkout到该分支

	另一种简洁的方式
	git checkout -t origin/远程分支名称  会在本地创建和远程同样的名称 并且tracking远程分支  自动checkout到该分支


=================================================================
使用场景

1. 正常开发
     
    某一个功能需要一个人 或几个人完成 

    git branch dev1  #创建一个功能分支 几个人协同 在dev1上开发

    开发结束并测试完成

    git checkout master #回到主分支
    git branch dev1     #将dev1分支添加到组分支中

                         dev1--------(D)-------merge
                       /                          \
   （A）---（B）----（C）-------------------------(E) ------(F)  master


2. 多个功能同时进行
	
    创建两个分支。针对每一个组的研发团队各开一个分支 然后分别在各自的分支进行开发和测试

    开发测试完成将合并到主分支。

			    dev1----------(E)---------merge	
			   /	                           \
    （A）--(B) -- (C) -- (D)-------------------------------(G)-----------(H)----- master
                                   \                                     /
				    dev2--------（F）---------------merge


3. 版本指定规则
	见《version_note》


4. 产品生产流程

	
	 develop             test             product
	    |                  |                  |
	    |                  |                  |
	   /|                  |                  |
	  | |                  |                  |
	  | |\                 |                  |
	  | | |                |                  |
	  | | |                |                  |
	   \|/                 |                  |
           tag1-----merge-->--tag1                |
	    |                  |                  |
	    |---------<------- |                  |
	    |		       |                  |
	    |------------>---  |                  |
	    |		       |--------merge-->-tag1



      1. develop 为测试提供测试版本 test 获取测试版本后测试 有问题通过 buglist or redmine 反馈给研发

      2. 研发在分支中持续改进 然后合并到主版本中 最后merger到test分支 测试持续测试(该过程持续循环)

      3. 当测试通过后 PM 创建product分支 通知产品已经发布。