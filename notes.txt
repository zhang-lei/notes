git 常用命令详解

git 命令

   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

================================================================================

整理关于git常用命令 便于日后查看 

1. 首先配置用户名和邮件名称。该步骤是为了配置github上的邮箱和用户名.
        git config --global user.name "zhang-lei"
        git config --global user.email "zhanglei4517@gmail.com"

        以上两条命令就将用户名和密码设置好了.如果不设置 后面commit是不会成功的.
2. 初始化本地仓库和创建文件 提交代码
        git init
        git add .
        git commit -m

3. 添加到远程仓库
        git remote add demo https://ip:port/zhang-lei/demo.git
        git pull demo master  表示获取远程demo master分支.
        git push demo master  表示发送上送demo master版本

4. 创建分支
        git branch 查看分支
        git branch dev   创建dev分支
        git branch -d dev 删除dev分支
        
        //远程分支操作
        
        //查看远程分支
        git branch -r
 	
 	//查看所有分支
 	git branch -a （包含本地分支和远程分支）
        
        //创建远程分支(同push)
        git push origin branchname
        
        //删除远程分支
        git push origin --delete branchname
        
        //删除远程tag
        git push origin --delete tagname
        
        //将远程分支checkout到本地 并切换到当前分支（跟踪）
        git checkout -b localbranchname origin/branchname  

5. 合并分支
        git merge dev 合并dev分支到当前分支
        git merge commitId 合并提交时内容到当前分支

6. checkout作用
        git checkout dev   分支之间跳转
        git checkout filename  恢复filename
        git checkout HEAD 恢复HEAD中的内容
        git checkout filename --cached
        git checkout filename --staged

7. 比较文件
        git diff
        git diff --cached
        git diff --staged
        git diff HEAD

8. 打标签。 标签作用 将提交的哈希码 起别名，便于记忆和操作。
	git tag  查看标签
	git tag  tagName 创建标签

9. 合并文件
	git merge 分支名称


10. 远程checkout分支

	git clone 的时候 默认从远程获取所有的分支 但是咱本地只创建一个master分支。

	如果想checkout到其它的分支 需要做以下工作

	git checkout -a 查看下所有分支 包含本地和远程所有分支

	git checkout -b 分支名称 origin/远程分支名称    -b 参数会创建一个分支 并tracking 远程分支 同时checkout到该分支

	另一种简洁的方式
	git checkout -t origin/远程分支名称  会在本地创建和远程同样的名称 并且tracking远程分支  自动checkout到该分支


=================================================================
使用场景

1. 正常开发
     
    某一个功能需要一个人 或几个人完成 

    git branch dev1  #创建一个功能分支 几个人协同 在dev1上开发

    开发结束并测试完成

    git checkout master #回到主分支
    git branch dev1     #将dev1分支添加到组分支中

                         dev1--------(D)-------merge
                       /                          \
   （A）---（B）----（C）-------------------------(E) ------(F)  master


2. 多个功能同时进行
	
    创建两个分支。针对每一个组的研发团队各开一个分支 然后分别在各自的分支进行开发和测试

    开发测试完成将合并到主分支。

			    dev1----------(E)---------merge	
			   /	                           \
    （A）--(B) -- (C) -- (D)-------------------------------(G)-----------(H)----- master
                                   \                                     /
				    dev2--------（F）---------------merge


3. 版本指定规则
	见《version_note》


4. 产品生产流程

	
	 develop             test             product
	    |                  |                  |
	    |                  |                  |
	   /|                  |                  |
	  | |                  |                  |
	  | |\                 |                  |
	  | | |                |                  |
	  | | |                |                  |
	   \|/                 |                  |
           tag1-----merge-->--tag1                |
	    |                  |                  |
	    |---------<------- |                  |
	    |		       |                  |
	    |------------>---  |                  |
	    |		       |--------merge-->-tag1



      1. develop 为测试提供测试版本 test 获取测试版本后测试 有问题通过 buglist or redmine 反馈给研发

      2. 研发在分支中持续改进 然后合并到主版本中 最后merger到test分支 测试持续测试(该过程持续循环)

      3. 当测试通过后 PM 创建product分支 通知产品已经发布。


///////////////////////////////////////////////////////////////////////////
网上整理内容
Linus为Linux Kernel Project发起的版本控制项目。
HEAD代表当前最新状态。
tag为某个状态的标签。
SHA1为每个提交日志的唯一标识。
 
install:
 
apt-get install git-core
 
 
git clone:
 
git仓库可以使用git clone获得：
git clone git://url
 
也可以通过浏览器浏览。
http://url/gitweb/
 
通过git pull更新仓库，使用git init-db初始化自己的仓库。
 
 
config:
 
开发人员需要为git仓库配置相关信息，这样在提交代码时，这些信息会自动
反映在git仓库的日志中。
 
git config user.name "your name"
git config user.email yourname@email_server
git config core.editor vim
git config core.paper "less -N"
git config color.diff true
git config alias.co checkout
 
git config alias表示，可以用git co代表git checkout。git var -l可以查看
已经设置的配置。
 
 
diff:
 
开发人员在本地进行开发后，可以使用git diff查看改动。
除了直接比较当前开发后的改动外，git diff还可以：
 
git diff tag                    比较tag和HEAD之间的不同。
git diff tag file               比较一个文件在两者之间的不同。
git diff tag1..tag2             比较两个tag之间的不同。
git diff SHA11..SHA12           比较两个提交之间的不同。
git diff tag1 tag2 file or
git diff tag1:file tag2:file    比较一个文件在两个tag之间的不同。
 
 
ORIG_HEAD用于指向前一个操作状态，因此在git pull之后如果想得到pull的
内容就可以：
 
git diff ORIG_HEAD
 
git diff --stat                 用于生成统计信息。
git diff --stat ORIG_HEAD
 
 
apply:
 
git apply相当于patch命令。
--check 检查能否正常打上补丁，-v verbose模式， -R reverse模式，反打补丁。
 
 
log:
 
git log file                    查看一个文件的改动。
git log -p                      查看日志和改动。
git log tag1..tag2              查看两个tag之间的日志。
git log -p tag1..tag2 file      查看一个文件在两个tag之间的不同。
git log tag..                   查看tag和HEAD之间的不同。
 
 
commit:
 
git commit -a -e        提交全部修改文件，并调用vim编辑提交日志。
git reset HEAD^ or
git reset HEAD~1        撤销最后一次提交。
git reset --hard HEAD^  撤销最后一次提交并清除本地修改。
git reset SHA1          回到SHA1对应的提交状态。
 
 
add/delete/ls:
 
git add -a              添加所有文件。除了.gitignore文件中的文件。
git rm file             从git仓库中删除文件。
git commit              添加或是删除后要提交。
 
git ls-files -m         显示修改过的文件。
git ls-files            显示所有仓库中的文件。
 
git中有四种对象：blob、tree、commit、tag。
blob代表文件，tree代表目录，commit代表提交历史，tag代表标签。
这四种对象都是由SHA1值表示的。在仓库的.git目录中保存了git管理仓库
所需要的全部信息。
 
git ls-tree HEAD file   显示file在HEAD中的SHA1值。
git cat-file -t SHA1    显示一个SHA1的类型。
git cat-file type SHA1  显示一个SHA1的内容。type是blob、tree、commit、tag之一。
 
patch:
 
git format-patch -1     生成最后一个提交对应的patch文件。
git am < patch          把一个patch文件加入git仓库中。
git am --resolved       如果有冲突，在解决冲突后执行。
git am --skip           放弃当前git am所引入的patch。
 
 
conflict:
 
git merge               用于合并两个分支。
git diff                如果有冲突，直接使用diff查看，
                        冲突代码用<<<和>>>表示。手动修改冲突代码。
git update-index        更新修改后的文件状态。
git commit -a -e        提交为解决冲突而修改的代码。
 
 
branch:
 
git branch -a           查看所有分支。
git branch new_branch   创建新的分支。
git branch -d branch    删除分支。
git checkout branch     切换当前分支。-f参数可以覆盖未提交内容。
 
 
daemon:
 
有时更新公共代码仓库使用patch的方式，或者直接
用git pull git://ip/repo branch
的方式更新每个人的代码。使用git pull的方式需要
提交代码的机器运行：
git daemon --verbose --export-all --enable=receive-pack --base-path=/repo
 
 
request-pull:
 
 
git request-pull start url      用于产生本次pull请求的统计信息。
 
 
clean:
 
 
git clean -dxf          用于清除未跟踪文件。
git clean -dnf          可以显示需要删除的文件，但不包括被.gitignore忽略的。
git reset --hard HEAD   用于清除跟踪文件的修改。
